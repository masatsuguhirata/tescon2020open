■テストフレーム
 「環境」ー「前提」ー「手順（トリガー）」ー「振る舞い」を意識する
テスト条件＋テスト対象＋振る舞いをテストフレームとしている

 テスト条件＋テスト対象
» テスト条件 ＋振る舞い
» テスト条件＋テスト対象＋振る舞い
» テスト条件 ＋狙っているバグ
» テスト条件＋テスト対象＋振る舞い＋狙っているバグ
、テスト条件系観点、テスト対象系観点、
振る舞い系観点、バグ系観点などが含まれているようにする


テスト対象：個別のコンポーネント、アクション・
振る舞い：振舞い
テスト条件：品質特性				検証できるもの、機能、トランザクション、フィーチャ、品質の属性、構造要素

前提条件：


・テスト対象が
・◇◇な場合（条件、状態、前提）
・〇〇すると（トリガー、イベント、操作）
・□□となる（期待結果）

これはテストタイプ（テストの目的）に含まれる。

■
テストフレームと、テストタイプにあたるものは別

■統合
子要素にする際は、isa hasa、子要素で完結するのか、子を確認した後統合して親でもやるのかがポイント


■1行目
オブジェクト名、そのまま

■2行目
テストの目的・達成したいこと・確認したい内容：
本家：テスト対象無し・確認したいこと

？何を記述するべきだろうという方向
	重要なテストの漏れがないこと。そのために、みっきーさんのいうテスト条件の定義をみたしたい。

■一週目
		前提：カタマリでオブジェクトは指定されているが、見たいものは変わるので何の制約にもならない
		一行目：	ざっくり何を確認するか知りたい。品質特性とかは曖昧だから嫌い。品質特性を何かしら具体化したものなら許せるかも。ふるまいとか。（物によっては具体的すぎな場合とかあるのかな）
					で、何のふるまいか知りたい。「テスト対象」が欲しい。
					ふるまいのままだと具体的すぎるので、「テストタイプでイメージできるもの、技法単位の粒度であればOK」
					
		2行目		テストケースに落としこみたい。理想は後は設計に落とし込めばOKなレベル。設計の責務に網羅率とかは任せていいともう。技法が使えるレベル。
					（網羅率とか、）異常時とか、性能評価とかそんな単語がみられるね。なんだろう
					テストフレームが使えそう。
					結構、言葉の粒度が難しいね。NGTで詳細度を整理しておかないとこんがらがっちゃう。
					
		理解		では、どう自分だったら書くのか考えてみよう
					
		カタマリ	プロジェクト一覧だね。一覧を継承するといいかも。
		一行目		（オブジェクト図をみながら）各機能の確認だね。検索するときは、大量のデータとかもやりたい。使用性の確認もしたいけど、プロジェクトの検索と追加じゃ見るものがが少し違うなあ。
					そもそも一行目の目的あってる？なくてもいいんじゃないかなあ
					大きくなった時のこともあるから、あとで考え直してみよう（※）
		二行目		プロジェクトを追加するは、目的はユーザー目線で追加するの操作を達成できる、機能適合性だね。
					権限の確認と、データが最後まで追加されたことを確認したいなあ。
					あと、粒度は、入力⇒プロジェクトを追加する⇒出力でいうと、
					「入力と出力のセット」と、プロジェクトを追加する過程の使いやすさかなあ。必要な項目が揃ってるとか、スムーズに進めるかとか。
					
					プロジェクトの検索・表示も一緒かなあ。
					入力⇒プロジェクトの検索⇒表示だね。でも入力から出力されるデータっていうロジック部分と表示部分にわかれるよ。
					入出力の確認は誰の責任だろう？「検索ボックス」「検索ボタン」のセットの責務にして、画面・操作パターンにいれたいなあ。
					でもそれだと、アクティブとアーカイブが漏れているよ。この辺りを画面・操作パターンに入れるのは難しそうだ。
					そのことに気づけるかなあ。明文化したいけどどうしたらいいんだろう（※）

					とりあえず見えてきたことは、プロセスを通した入出力の確認はする。
					プロセスの中見については、使用性はみる。ユーザーの操作パターン（2つ以上の組み合わせ操作）も見るってのが安パイかなあ？
					二つ以上の（※）って所は、まあ重複するかもだけど、マシではあるよね。
					例えば、保存するってしたときに、項目を入力して保存する　はどう扱う？
					うーん。それは、画面・操作パターンだなあ。違いはなんだろう（※）
			
					
					機能テストの目的は、プロジェクト検索で目的を達成できることだね。
					一方、画面・操作パターンはボタンとか画面とか、検索っていう文脈はもたないとかヒントにならないかな。
					
					
					ソート機能とかもあるけど、これはボタン単品でやったらできそうだね。
					データの入り具合とかの条件はいりそうだけど？
					ボタン側の責務に突っ込めば問題ないね。そう書いておけば、設計者はボタンのテストを見に行ってあるからいいやってなると思うよ。


		振り返り		どうやら設計に入っちゃってるね※
					確認したい内容と設計はわけよう※※画面操作との切り分けは設計の時に考えればいい
					フレームはどっち？
					NGTは観点。フレームも観点※検索のときのフレームは
					実装によるけど所属してないプロジェクトはどうなるんだろう。※使用性の一部だね
					

■2週目
	導入			2週目に入るまえに、テストカタマリー参考資料を全て読み返して気づきを得よう
					

	一行目
	ニ行目整理		プロジェクトを追加するは、入出力の確認（オブジェクトの保存）。権限ー機能で操作可否だね。使い勝手も！
				プロジェクトの検索はロジックと表示。ロジックには人によってとかのフレームも追加したい！


？観察した限り何をみているのだろう
	

？曖昧で揺れるので、何のために記述しているのだろう。なんで左と右の対応があるのだろう。
		old>※「テストタイプ」や「具体的なテスト名称（テストカテゴリ相当）」と、品質特性・ガイドっぽいわーど、重要な気がかり項目・不具合確認を分けた理由ってなんだろう。
		old>テストタイプに包含される一方、具体的なテスト名称との関係はどうだろう。ゆもつよメソッド履修してないのでちゃんとしたことはいえない。
		old>例えば、機能-権限：機能適合性
		old>が漏れると思うのですが、


■3行目
テストケースとなる項目（テストフレーム）テストタイプ

※テストフレームまでレビュー対象としたい

※本家では、（）内に何がはいっているか網羅基準



■上記が終わったら
他の機能テストもみてみて表現できそうか考えてみる


本家家元との差分を確認
　－DFDの操作することをカタマリとおいていた
　－テストフレームの概念を追加
　－併せてNGT化する必要があるか？



＝＝＝＝＝＝＝
■テストカタマリ再ロード


http://blog.amateur-factory.jp/?eid=1444271
・属性に品質特性を利用すると漏れやすいので、再度掘り下げる。＊


http://blog.amateur-factory.jp/?eid=1444272
・アラーム編集をディシジョンテーブルに落とし込むのはいい。＊試す
その際のテストスコープの取り方が当初考えていたものと違う。対象をうまく設定できたらいいと思う。
オブジェクト毎にすると、画面内の特定のコンポーネントなど漏れると思う

仕様の世界とコンポーネントの世界で隔たりがあるので、そのあたりをうまく吸収させる領域の取り方を探りたい。


http://blog.amateur-factory.jp/?eid=1444273
・「名前」で特定される機能や画面などの範囲に対してテストケースの塊が含まれている

今回はオブジェクトである。機能はあらかた網羅しており（パンくずとか画面に起因するものは除く、オブジェクトとして作成すべき。＊）
各オブジェクトの操作は数が多すぎて全体レビューができないのと、粒度が小さくオブジェクトで抑えられると感じた。
画面単位だと、頻繁にUIが変わるとつらい。オブジェクトは、設計が大きく変わらない。
一方で、テスト対象の確認漏れ（e.g.に注意しなければならない）

そっか。実装を想像したらいいのか。メソッドが画面に埋め込まれているイメージを線引きに使えないか、またはNGTのGUI機能環境要素＊


===========
1行目：（カタマリー内の任意のテスト対象に対して横断的に確認する）テストタイプ（特定の特性に対応したテスト活動をまとめたもの）　:　品質特性（テスト）

※なぜ属性名を、操作の型にスワップするのか？割り付けしたいからだろう
※つまり、＊＊＊＊＊＊＊＊＊＊＊＊フレームにできそう！どうフレームでみているかわかる。＊＊＊＊＊

2行目：
各テスト対象（と、確認内容

■テストカタマリー名：

■1行目属性テストタイプや具体的なテスト名称 : 品質要素
 
・品質要素
　　例えば、品質特性・ガイドワード（タイミング、レスポンス、処理重ね合わせ）不具合確認
　　（テスト対象に対して横断的に確認するテストの目的）
　　（ブンルイーのトップビューポイントが入っているようだ）
	
・具体的なテスト名称は、テストカテゴリ相当のものが入る。
　　「テスト観点（の、とある抽象度範囲）」 もしくは「テストカテゴリ」と同等と考えてよい。パターンとして異なる機能で流用可能
　　テストケース/テストケースのグループは目的（意図）を持つ。
　　（ブンルイーのボトムビューポイントが入っているようだ。詳細度が十分かは別途確認すること）
　　（複数のテストケースを束ねるテストタイプ、または一つのテストケース名）

■2行目操作:テストケースとなる項目（確認方針) : テストタイプや具体的なテスト名称
　　（テストケースに落としこむための整理）
　　
　　VSTePより引用.どのタイミングでモデルベーステストができるか体感を掴めないか探る
　　>> ボトムビューポイントに対応するテスト詳細設計モデルを定め、
　　網羅アルゴリズムと網羅基準にしたがって
　　具体的な値や機能、組み合わせを列挙し、テストケースとする
	
■備考
		※属性名を操作の型にスワップする




===========


＞テストカタマリー1つの粒度（大きさ）は画面1つであったり、とある機能であったり、非機能項目、とあるテストタイプであったりと自由に出来ます。
多少大きいサイズだとしても、この後「has-a」を用いた表現で分解することも可能ですね。

